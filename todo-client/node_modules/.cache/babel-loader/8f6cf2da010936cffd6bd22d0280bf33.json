{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\TO-DO APP FULL\\\\PART CJ\\\\todo-client\\\\src\\\\component\\\\Login\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useMutation, gql } from \"@apollo/client\";\nimport 'semantic-ui-css/semantic.min.css';\nimport { Button, Form, Grid, Header, Segment } from 'semantic-ui-react';\nimport { useHistory } from 'react-router-dom';\nimport { v4 as uuidv4 } from 'uuid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LOGIN_USER = gql`\nmutation Mutation($userLoginEMail: String!) {\n  userLogin(eMail: $userLoginEMail) {\n    id\n    email\n  }\n}\n`;\n\nfunction Login() {\n  _s();\n\n  const history = useHistory();\n  let input;\n  const [addUser, {\n    loading,\n    error,\n    data\n  }] = useMutation(LOGIN_USER);\n  if (loading) return 'Submitting...';\n  if (error) return `Submission error! ${error.message}`;\n  console.log(error, data);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    textAlign: \"center\",\n    style: {\n      height: '100vh'\n    },\n    verticalAlign: \"middle\",\n    children: /*#__PURE__*/_jsxDEV(Grid.Column, {\n      style: {\n        maxWidth: 450\n      },\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        as: \"h2\",\n        color: \"teal\",\n        textAlign: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          src: \"/logo.png\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), \" Log-in to your account\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        size: \"large\",\n        onSubmit: e => {\n          e.preventDefault();\n\n          if (!input.value.trim()) {\n            return;\n          }\n\n          addUser({\n            variables: {\n              userLoginEMail: input.value\n            }\n          });\n          input.value = \" \";\n        },\n        children: /*#__PURE__*/_jsxDEV(Segment, {\n          stacked: true,\n          children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            icon: \"user\",\n            iconPosition: \"left\",\n            placeholder: \"E-mail address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n            fluid: true,\n            icon: \"lock\",\n            iconPosition: \"left\",\n            placeholder: \"Password\",\n            type: \"password\",\n            ref: node => input = node\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"teal\",\n            fluid: true,\n            size: \"large\",\n            type: \"submit\",\n            children: \"Login\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Login, \"ao8zvd1pcruVM+1sm6GNO3/a29o=\", false, function () {\n  return [useHistory, useMutation];\n});\n\n_c = Login;\nexport default Login;\n\nvar _c;\n\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"sources":["C:/Users/User/Downloads/TO-DO APP FULL/PART CJ/todo-client/src/component/Login/Login.js"],"names":["React","useState","useMutation","gql","Button","Form","Grid","Header","Segment","useHistory","v4","uuidv4","LOGIN_USER","Login","history","input","addUser","loading","error","data","message","console","log","height","maxWidth","e","preventDefault","value","trim","variables","userLoginEMail","node"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useMutation, gql} from \"@apollo/client\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\n\r\nexport const LOGIN_USER = gql`\r\nmutation Mutation($userLoginEMail: String!) {\r\n  userLogin(eMail: $userLoginEMail) {\r\n    id\r\n    email\r\n  }\r\n}\r\n`;\r\n\r\nfunction Login() {\r\n\r\n  const history = useHistory();\r\n   let input;\r\n  \r\n  const [addUser, {loading, error, data }] = useMutation(LOGIN_USER);\r\n  \r\n  if (loading) return 'Submitting...';\r\n  if (error) return `Submission error! ${error.message}`;\r\n\r\n  console.log(error, data);\r\n  \r\n  return (\r\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n    <Grid.Column style={{ maxWidth: 450 }}>\r\n      <Header as='h2' color='teal' textAlign='center'>\r\n        <Image src='/logo.png' /> Log-in to your account\r\n      </Header>\r\n      <Form size='large' onSubmit={(e) => {\r\n              e.preventDefault();\r\n              if (!input.value.trim()){\r\n                return;\r\n              }\r\n              addUser({variables: {userLoginEMail: input.value}})\r\n              input.value= \" \";\r\n            }}>\r\n        <Segment stacked>\r\n          <Form.Input fluid icon='user' iconPosition='left' placeholder='E-mail address' />\r\n          <Form.Input\r\n            fluid\r\n            icon='lock'\r\n            iconPosition='left'\r\n            placeholder='Password'\r\n            type='password'\r\n            ref={(node) => (input = node)}\r\n          />\r\n\r\n          <Button color='teal' fluid size='large' type=\"submit\">\r\n            Login\r\n          </Button>\r\n        </Segment>\r\n      </Form>\r\n    </Grid.Column>\r\n  </Grid>\r\n\r\n  );\r\n\r\n}\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}
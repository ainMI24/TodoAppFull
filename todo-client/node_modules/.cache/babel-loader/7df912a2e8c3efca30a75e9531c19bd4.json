{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\TO-DO APP FULL\\\\PART CJ\\\\todo-client\\\\src\\\\component\\\\Todo\\\\TodoPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './TodoPage.css';\nimport Todos from './todos';\nimport { v4 as uuidv4 } from 'uuid';\nimport SearchTodo from '../Search/SearchTodo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRAPHQL_API = 'http://localhost:4000/';\n\nfunction TodoPage() {\n  _s();\n\n  const [todoValue, setTodoValue] = useState(\"\");\n  const [todos, updateTodosList] = useState([]);\n  const [todoArray, setTodoArray] = useState([]);\n  useEffect(() => {\n    const query = `query Query {\n      getNotes {\n        id\n        todo\n        status\n      }\n    }`;\n    fetch(GRAPHQL_API, {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(result => {\n      setTodoArray(result.data.getNotes);\n    });\n  }, []); //handle input value\n\n  const handleInputChange = event => {\n    setTodoValue(event.target.value);\n  }; //create new data to graphql server after submit\n\n\n  const handleButtonClick = event => {\n    window.location.reload();\n    const query = `\n    mutation Mutation {\n      createNote(todo: \"${todoValue}\") {\n        id\n        todo\n        status\n      }\n    }\n    `;\n    fetch(GRAPHQL_API, {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json());\n\n    if (todoValue != null) {\n      const newItem = {\n        id: uuidv4(),\n        todo: todoValue,\n        status: false\n      };\n      setTodoArray(previousTodos => {\n        return [...previousTodos, newItem];\n      });\n      console.log(newItem);\n      console.log(newItem.id);\n      setTodoValue(\"\");\n    } else {}\n  };\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleButtonClick();\n    }\n  }; //mark complete function (tally with graphql)\n\n\n  const markComplete = id => {\n    const updatedTodo = todoArray.map(item => {\n      if (item.id == id) {\n        item.status = !item.status;\n\n        if (item.status) {\n          const query = `\n          mutation UpdateStatusMutation {\n            updateStatus(iD: \"${id}\", newStatus: true) {\n              id\n              todo\n              status\n            }\n          }\n          `;\n          fetch(GRAPHQL_API, {\n            method: 'POST',\n            body: JSON.stringify({\n              query\n            }),\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => response.json());\n        } else {\n          const query = `\n          mutation UpdateStatusMutation {\n            updateStatus(iD: \"${id}\", newStatus: false) {\n              id\n              todo\n              status\n            }\n          }\n          `;\n          fetch(GRAPHQL_API, {\n            method: 'POST',\n            body: JSON.stringify({\n              query\n            }),\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => response.json());\n        }\n      }\n    });\n    updateTodosList(updatedTodo);\n  }; //delete function (tally with graphql)\n\n\n  const delTodo = id => {\n    setTodoArray([...todoArray.filter(todo => {\n      return todo.id !== id;\n    })]);\n    const query = `\n    mutation Mutation {\n      deleteNote(iD: \"${id}\") {\n        id\n        todo\n        status\n      }\n    }\n    `;\n    fetch(GRAPHQL_API, {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    className: \"todo__body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"todo__heading\",\n      children: \"Todo GraphQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"todo__input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo__input-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"todo__input-box\",\n        onChange: handleInputChange,\n        onKeyDown: handleKeyPress,\n        placeholder: \"What needs to be done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"todo__input-button\",\n        onClick: handleButtonClick,\n        children: \"Add Todo Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Todos, {\n      todoArray: todoArray,\n      markComplete: markComplete,\n      delTodo: delTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoPage, \"Loo1T7KQ4b4Um4T6yixrwJKpSIE=\");\n\n_c = TodoPage;\nexport default TodoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoPage\");","map":{"version":3,"sources":["C:/Users/User/Downloads/TO-DO APP FULL/PART CJ/todo-client/src/component/Todo/TodoPage.js"],"names":["React","useEffect","useState","Todos","v4","uuidv4","SearchTodo","GRAPHQL_API","TodoPage","todoValue","setTodoValue","todos","updateTodosList","todoArray","setTodoArray","query","fetch","method","body","JSON","stringify","headers","then","response","json","result","data","getNotes","handleInputChange","event","target","value","handleButtonClick","window","location","reload","newItem","id","todo","status","previousTodos","console","log","handleKeyPress","e","key","markComplete","updatedTodo","map","item","delTodo","filter"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './TodoPage.css';\r\nimport Todos from './todos';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport SearchTodo from '../Search/SearchTodo';\r\n\r\nconst GRAPHQL_API = 'http://localhost:4000/';\r\n\r\nfunction TodoPage() {\r\n  const [todoValue, setTodoValue] = useState(\"\");\r\n  const [todos, updateTodosList] = useState([]);\r\n  const [todoArray, setTodoArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    const query = `query Query {\r\n      getNotes {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }`;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json()).then(result => {\r\n      setTodoArray(result.data.getNotes);\r\n    });\r\n\r\n  }, []);\r\n\r\n  //handle input value\r\n  const handleInputChange = event => {\r\n    setTodoValue(event.target.value);\r\n  };\r\n\r\n  //create new data to graphql server after submit\r\n  const handleButtonClick = (event) => {\r\n    window.location.reload();\r\n\r\n    const query = `\r\n    mutation Mutation {\r\n      createNote(todo: \"${todoValue}\") {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }\r\n    `;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json());\r\n\r\n    if (todoValue != null) {\r\n      const newItem = {\r\n        id: uuidv4(),\r\n        todo: todoValue,\r\n        status: false\r\n      };\r\n\r\n      setTodoArray(previousTodos => {\r\n        return [...previousTodos, newItem];\r\n      });\r\n\r\n      console.log(newItem)\r\n      console.log(newItem.id)\r\n\r\n      setTodoValue(\"\");\r\n    }\r\n    else {\r\n\r\n    }\r\n  }\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleButtonClick();\r\n    }\r\n  }\r\n\r\n  //mark complete function (tally with graphql)\r\n  const markComplete = id => {\r\n    const updatedTodo = todoArray.map(item => {\r\n      if (item.id == id) {\r\n        item.status = !item.status;\r\n\r\n        if (item.status) {\r\n          const query = `\r\n          mutation UpdateStatusMutation {\r\n            updateStatus(iD: \"${id}\", newStatus: true) {\r\n              id\r\n              todo\r\n              status\r\n            }\r\n          }\r\n          `;\r\n\r\n          fetch(GRAPHQL_API, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              query\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json'\r\n            }\r\n          }).then(response => response.json());\r\n        }\r\n        else {\r\n          const query = `\r\n          mutation UpdateStatusMutation {\r\n            updateStatus(iD: \"${id}\", newStatus: false) {\r\n              id\r\n              todo\r\n              status\r\n            }\r\n          }\r\n          `;\r\n\r\n          fetch(GRAPHQL_API, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              query\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json'\r\n            }\r\n          }).then(response => response.json());\r\n        }\r\n      }\r\n    })\r\n    updateTodosList(updatedTodo);\r\n  };\r\n\r\n  //delete function (tally with graphql)\r\n  const delTodo = id => {\r\n\r\n    setTodoArray([\r\n      ...todoArray.filter(todo => {\r\n        return todo.id !== id;\r\n      })\r\n    ]);\r\n\r\n    const query = `\r\n    mutation Mutation {\r\n      deleteNote(iD: \"${id}\") {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }\r\n    `;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json())\r\n  };\r\n\r\n  return (\r\n\r\n    <body className=\"todo__body\">\r\n      <h1 className=\"todo__heading\">Todo GraphQL</h1>\r\n      {/* <SearchTodo/> */}\r\n      <form className=\"todo__input-form\">\r\n        <label className=\"todo__input-title\"></label>\r\n        <input className=\"todo__input-box\" onChange={handleInputChange} onKeyDown={handleKeyPress}\r\n          placeholder=\"What needs to be done\" />\r\n\r\n        <button className=\"todo__input-button\" onClick={handleButtonClick}>Add Todo Item</button>\r\n      </form>\r\n\r\n      <Todos todoArray={todoArray} markComplete={markComplete} delTodo={delTodo} />\r\n\r\n    </body>\r\n  );\r\n}\r\n\r\nexport default TodoPage;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
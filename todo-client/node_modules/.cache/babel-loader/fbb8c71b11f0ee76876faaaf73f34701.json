{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Downloads\\\\TO-DO APP FULL\\\\PART CJ\\\\todo-client\\\\src\\\\component\\\\Todo\\\\TodoPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './TodoPage.css';\nimport Todos from './todos';\nimport { v4 as uuidv4 } from 'uuid';\nimport SearchTodo from '../Search/SearchTodo';\nimport { gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GRAPHQL_API = 'http://localhost:4000/';\nconst LOAD_NOTES = gql`\n  query Query {\n  getNotes {\n    id\n    todo\n    status\n  }\n}`;\n\nfunction TodoPage() {\n  _s();\n\n  const [todoValue, setTodoValue] = useState(\"\");\n  const [todos, updateTodosList] = useState([]);\n  const [todoArray, setTodoArray] = useState([]);\n  const [searchText, setSearchText] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(LOAD_NOTES);\n  useEffect(() => {\n    const query = `query Query {\n      getNotes {\n        id\n        todo\n        status\n      }\n    }`;\n    fetch(GRAPHQL_API, {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json()).then(result => {\n      setTodoArray(result.data.getNotes);\n    });\n  }, []); //handle input value\n\n  const handleInputChange = event => {\n    setTodoValue(event.target.value);\n  }; //create new data to graphql server after submit\n\n\n  const handleButtonClick = event => {\n    window.location.reload();\n    const query = `\n    mutation Mutation {\n      createNote(todo: \"${todoValue}\") {\n        id\n        todo\n        status\n      }\n    }\n    `;\n    fetch(GRAPHQL_API, {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json());\n\n    if (todoValue != null) {\n      const newItem = {\n        id: uuidv4(),\n        todo: todoValue,\n        status: false\n      };\n      setTodoArray(previousTodos => {\n        return [...previousTodos, newItem];\n      });\n      console.log(newItem);\n      console.log(newItem.id);\n      setTodoValue(\"\");\n    } else {}\n  };\n\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      handleButtonClick();\n    }\n  }; //mark complete function (tally with graphql)\n\n\n  const markComplete = id => {\n    const updatedTodo = todoArray.map(item => {\n      if (item.id == id) {\n        item.status = !item.status;\n\n        if (item.status) {\n          const query = `\n          mutation UpdateStatusMutation {\n            updateStatus(iD: \"${id}\", newStatus: true) {\n              id\n              todo\n              status\n            }\n          }\n          `;\n          fetch(GRAPHQL_API, {\n            method: 'POST',\n            body: JSON.stringify({\n              query\n            }),\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => response.json());\n        } else {\n          const query = `\n          mutation UpdateStatusMutation {\n            updateStatus(iD: \"${id}\", newStatus: false) {\n              id\n              todo\n              status\n            }\n          }\n          `;\n          fetch(GRAPHQL_API, {\n            method: 'POST',\n            body: JSON.stringify({\n              query\n            }),\n            headers: {\n              'content-type': 'application/json'\n            }\n          }).then(response => response.json());\n        }\n      }\n    });\n    updateTodosList(updatedTodo);\n  }; //delete function (tally with graphql)\n\n\n  const delTodo = id => {\n    setTodoArray([...todoArray.filter(todo => {\n      return todo.id !== id;\n    })]);\n    const query = `\n    mutation Mutation {\n      deleteNote(iD: \"${id}\") {\n        id\n        todo\n        status\n      }\n    }\n    `;\n    fetch(GRAPHQL_API, {\n      method: 'POST',\n      body: JSON.stringify({\n        query\n      }),\n      headers: {\n        'content-type': 'application/json'\n      }\n    }).then(response => response.json());\n  }; //search part\n\n\n  useEffect(() => {\n    if (!loading) {\n      const results = data.getNotes.filter(item => item.todo.toLowerCase().includes(searchText.toLowerCase()));\n      setSearchResults(results);\n    }\n  }, [loading, searchText]);\n  console.log(searchResults);\n\n  const handleChange = e => {\n    setSearchText(e.target.value);\n  };\n\n  if (loading) return 'Loading...';\n  if (error) return `Error! ${error.message}`;\n  return /*#__PURE__*/_jsxDEV(\"body\", {\n    className: \"todo__body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"todo__heading\",\n      children: \"Todo GraphQL\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"todo__input-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"todo__input-title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"todo__input-box\",\n        onChange: handleInputChange,\n        onKeyDown: handleKeyPress,\n        placeholder: \"What needs to be done\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"todo__input-button\",\n        onClick: handleButtonClick,\n        children: \"Add Todo Item\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Search...\",\n        value: searchText,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: searchResults.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [item.todo, item.status]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Todos, {\n      todoArray: todoArray,\n      markComplete: markComplete,\n      delTodo: delTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TodoPage, \"XGYo4ENr8EE9dhNk4ZjjJIIl+jE=\", true);\n\n_c = TodoPage;\nexport default TodoPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoPage\");","map":{"version":3,"sources":["C:/Users/User/Downloads/TO-DO APP FULL/PART CJ/todo-client/src/component/Todo/TodoPage.js"],"names":["React","useEffect","useState","Todos","v4","uuidv4","SearchTodo","gql","GRAPHQL_API","LOAD_NOTES","TodoPage","todoValue","setTodoValue","todos","updateTodosList","todoArray","setTodoArray","searchText","setSearchText","searchResults","setSearchResults","loading","error","data","useQuery","query","fetch","method","body","JSON","stringify","headers","then","response","json","result","getNotes","handleInputChange","event","target","value","handleButtonClick","window","location","reload","newItem","id","todo","status","previousTodos","console","log","handleKeyPress","e","key","markComplete","updatedTodo","map","item","delTodo","filter","results","toLowerCase","includes","handleChange","message"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,gBAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,SAAQC,GAAR,QAAkB,gBAAlB;;AAEA,MAAMC,WAAW,GAAG,wBAApB;AAEA,MAAMC,UAAU,GAAGF,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,EAPA;;AASA,SAASG,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACW,KAAD,EAAQC,eAAR,IAA2BZ,QAAQ,CAAC,EAAD,CAAzC;AACA,QAAM,CAACa,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAM,CAACe,UAAD,EAAaC,aAAb,IAA8BhB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACiB,aAAD,EAAgBC,gBAAhB,IAAoClB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM;AAACmB,IAAAA,OAAD;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA;AAAjB,MAAyBC,QAAQ,CAACf,UAAD,CAAvC;AAEAR,EAAAA,SAAS,CAAC,MAAM;AAEd,UAAMwB,KAAK,GAAI;AACnB;AACA;AACA;AACA;AACA;AACA,MANI;AAQAC,IAAAA,KAAK,CAAClB,WAAD,EAAc;AACjBmB,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA;AADmB,OAAf,CAFW;AAKjBM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AALQ,KAAd,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EAQqCF,IARrC,CAQ0CG,MAAM,IAAI;AAClDnB,MAAAA,YAAY,CAACmB,MAAM,CAACZ,IAAP,CAAYa,QAAb,CAAZ;AACD,KAVD;AAYD,GAtBQ,EAsBN,EAtBM,CAAT,CATkB,CAiClB;;AACA,QAAMC,iBAAiB,GAAGC,KAAK,IAAI;AACjC1B,IAAAA,YAAY,CAAC0B,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAZ;AACD,GAFD,CAlCkB,CAsClB;;;AACA,QAAMC,iBAAiB,GAAIH,KAAD,IAAW;AACnCI,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AAEA,UAAMnB,KAAK,GAAI;AACnB;AACA,0BAA0Bd,SAAU;AACpC;AACA;AACA;AACA;AACA;AACA,KARI;AAUAe,IAAAA,KAAK,CAAClB,WAAD,EAAc;AACjBmB,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA;AADmB,OAAf,CAFW;AAKjBM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AALQ,KAAd,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB;;AAUA,QAAIvB,SAAS,IAAI,IAAjB,EAAuB;AACrB,YAAMkC,OAAO,GAAG;AACdC,QAAAA,EAAE,EAAEzC,MAAM,EADI;AAEd0C,QAAAA,IAAI,EAAEpC,SAFQ;AAGdqC,QAAAA,MAAM,EAAE;AAHM,OAAhB;AAMAhC,MAAAA,YAAY,CAACiC,aAAa,IAAI;AAC5B,eAAO,CAAC,GAAGA,aAAJ,EAAmBJ,OAAnB,CAAP;AACD,OAFW,CAAZ;AAIAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYN,OAAO,CAACC,EAApB;AAEAlC,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAfD,MAgBK,CAEJ;AACF,GA1CD;;AA4CA,QAAMwC,cAAc,GAAIC,CAAD,IAAO;AAC5B,QAAIA,CAAC,CAACC,GAAF,KAAU,OAAd,EAAuB;AACrBb,MAAAA,iBAAiB;AAClB;AACF,GAJD,CAnFkB,CAyFlB;;;AACA,QAAMc,YAAY,GAAGT,EAAE,IAAI;AACzB,UAAMU,WAAW,GAAGzC,SAAS,CAAC0C,GAAV,CAAcC,IAAI,IAAI;AACxC,UAAIA,IAAI,CAACZ,EAAL,IAAWA,EAAf,EAAmB;AACjBY,QAAAA,IAAI,CAACV,MAAL,GAAc,CAACU,IAAI,CAACV,MAApB;;AAEA,YAAIU,IAAI,CAACV,MAAT,EAAiB;AACf,gBAAMvB,KAAK,GAAI;AACzB;AACA,gCAAgCqB,EAAG;AACnC;AACA;AACA;AACA;AACA;AACA,WARU;AAUApB,UAAAA,KAAK,CAAClB,WAAD,EAAc;AACjBmB,YAAAA,MAAM,EAAE,MADS;AAEjBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,cAAAA;AADmB,aAAf,CAFW;AAKjBM,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT;AALQ,WAAd,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB;AASD,SApBD,MAqBK;AACH,gBAAMT,KAAK,GAAI;AACzB;AACA,gCAAgCqB,EAAG;AACnC;AACA;AACA;AACA;AACA;AACA,WARU;AAUApB,UAAAA,KAAK,CAAClB,WAAD,EAAc;AACjBmB,YAAAA,MAAM,EAAE,MADS;AAEjBC,YAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,cAAAA;AADmB,aAAf,CAFW;AAKjBM,YAAAA,OAAO,EAAE;AACP,8BAAgB;AADT;AALQ,WAAd,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB;AASD;AACF;AACF,KA/CmB,CAApB;AAgDApB,IAAAA,eAAe,CAAC0C,WAAD,CAAf;AACD,GAlDD,CA1FkB,CA8IlB;;;AACA,QAAMG,OAAO,GAAGb,EAAE,IAAI;AAEpB9B,IAAAA,YAAY,CAAC,CACX,GAAGD,SAAS,CAAC6C,MAAV,CAAiBb,IAAI,IAAI;AAC1B,aAAOA,IAAI,CAACD,EAAL,KAAYA,EAAnB;AACD,KAFE,CADQ,CAAD,CAAZ;AAMA,UAAMrB,KAAK,GAAI;AACnB;AACA,wBAAwBqB,EAAG;AAC3B;AACA;AACA;AACA;AACA;AACA,KARI;AAUApB,IAAAA,KAAK,CAAClB,WAAD,EAAc;AACjBmB,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBL,QAAAA;AADmB,OAAf,CAFW;AAKjBM,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AALQ,KAAd,CAAL,CAQGC,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB;AASD,GA3BD,CA/IkB,CA6KlB;;;AACAjC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACoB,OAAL,EAAc;AACZ,YAAMwC,OAAO,GAAGtC,IAAI,CAACa,QAAL,CAAcwB,MAAd,CAAqBF,IAAI,IAAIA,IAAI,CAACX,IAAL,CAAUe,WAAV,GAAwBC,QAAxB,CAAiC9C,UAAU,CAAC6C,WAAX,EAAjC,CAA7B,CAAhB;AACA1C,MAAAA,gBAAgB,CAACyC,OAAD,CAAhB;AACD;AACF,GALQ,EAKN,CAACxC,OAAD,EAAUJ,UAAV,CALM,CAAT;AAOAiC,EAAAA,OAAO,CAACC,GAAR,CAAYhC,aAAZ;;AACA,QAAM6C,YAAY,GAAGX,CAAC,IAAI;AACxBnC,IAAAA,aAAa,CAACmC,CAAC,CAACd,MAAF,CAASC,KAAV,CAAb;AACD,GAFD;;AAIA,MAAInB,OAAJ,EAAa,OAAO,YAAP;AACb,MAAIC,KAAJ,EAAW,OAAQ,UAASA,KAAK,CAAC2C,OAAQ,EAA/B;AAGX,sBAEE;AAAM,IAAA,SAAS,EAAC,YAAhB;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAM,MAAA,SAAS,EAAC,kBAAhB;AAAA,8BAEE;AAAO,QAAA,SAAS,EAAC;AAAjB;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAO,QAAA,SAAS,EAAC,iBAAjB;AAAmC,QAAA,QAAQ,EAAE5B,iBAA7C;AAAgE,QAAA,SAAS,EAAEe,cAA3E;AACE,QAAA,WAAW,EAAC;AADd;AAAA;AAAA;AAAA;AAAA,cAHF,eAME;AAAQ,QAAA,SAAS,EAAC,oBAAlB;AAAuC,QAAA,OAAO,EAAEX,iBAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAWE;AAAA,8BACE;AACE,QAAA,IAAI,EAAC,MADP;AAEE,QAAA,WAAW,EAAC,WAFd;AAGE,QAAA,KAAK,EAAExB,UAHT;AAIE,QAAA,QAAQ,EAAE+C;AAJZ;AAAA;AAAA;AAAA;AAAA,cADF,eAOE;AAAA,kBACC7C,aAAa,CAACsC,GAAd,CAAkBC,IAAI,iBACrB;AAAA,qBAAKA,IAAI,CAACX,IAAV,EAAgBW,IAAI,CAACV,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADD;AADD;AAAA;AAAA;AAAA;AAAA,cAPF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAwBE,QAAC,KAAD;AAAO,MAAA,SAAS,EAAEjC,SAAlB;AAA6B,MAAA,YAAY,EAAEwC,YAA3C;AAAyD,MAAA,OAAO,EAAEI;AAAlE;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF;AA8BD;;GA5NQjD,Q;;KAAAA,Q;AA8NT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './TodoPage.css';\r\nimport Todos from './todos';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport SearchTodo from '../Search/SearchTodo';\r\nimport {gql} from '@apollo/client'\r\n\r\nconst GRAPHQL_API = 'http://localhost:4000/';\r\n\r\nconst LOAD_NOTES = gql`\r\n  query Query {\r\n  getNotes {\r\n    id\r\n    todo\r\n    status\r\n  }\r\n}`;\r\n\r\nfunction TodoPage() {\r\n  const [todoValue, setTodoValue] = useState(\"\");\r\n  const [todos, updateTodosList] = useState([]);\r\n  const [todoArray, setTodoArray] = useState([]);\r\n  \r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const {loading, error, data} = useQuery(LOAD_NOTES);\r\n\r\n  useEffect(() => {\r\n\r\n    const query = `query Query {\r\n      getNotes {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }`;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json()).then(result => {\r\n      setTodoArray(result.data.getNotes);\r\n    });\r\n\r\n  }, []);\r\n\r\n  //handle input value\r\n  const handleInputChange = event => {\r\n    setTodoValue(event.target.value);\r\n  };\r\n\r\n  //create new data to graphql server after submit\r\n  const handleButtonClick = (event) => {\r\n    window.location.reload();\r\n\r\n    const query = `\r\n    mutation Mutation {\r\n      createNote(todo: \"${todoValue}\") {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }\r\n    `;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json());\r\n\r\n    if (todoValue != null) {\r\n      const newItem = {\r\n        id: uuidv4(),\r\n        todo: todoValue,\r\n        status: false\r\n      };\r\n\r\n      setTodoArray(previousTodos => {\r\n        return [...previousTodos, newItem];\r\n      });\r\n\r\n      console.log(newItem)\r\n      console.log(newItem.id)\r\n\r\n      setTodoValue(\"\");\r\n    }\r\n    else {\r\n\r\n    }\r\n  }\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleButtonClick();\r\n    }\r\n  }\r\n\r\n  //mark complete function (tally with graphql)\r\n  const markComplete = id => {\r\n    const updatedTodo = todoArray.map(item => {\r\n      if (item.id == id) {\r\n        item.status = !item.status;\r\n\r\n        if (item.status) {\r\n          const query = `\r\n          mutation UpdateStatusMutation {\r\n            updateStatus(iD: \"${id}\", newStatus: true) {\r\n              id\r\n              todo\r\n              status\r\n            }\r\n          }\r\n          `;\r\n\r\n          fetch(GRAPHQL_API, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              query\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json'\r\n            }\r\n          }).then(response => response.json());\r\n        }\r\n        else {\r\n          const query = `\r\n          mutation UpdateStatusMutation {\r\n            updateStatus(iD: \"${id}\", newStatus: false) {\r\n              id\r\n              todo\r\n              status\r\n            }\r\n          }\r\n          `;\r\n\r\n          fetch(GRAPHQL_API, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              query\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json'\r\n            }\r\n          }).then(response => response.json());\r\n        }\r\n      }\r\n    })\r\n    updateTodosList(updatedTodo);\r\n  };\r\n\r\n  //delete function (tally with graphql)\r\n  const delTodo = id => {\r\n\r\n    setTodoArray([\r\n      ...todoArray.filter(todo => {\r\n        return todo.id !== id;\r\n      })\r\n    ]);\r\n\r\n    const query = `\r\n    mutation Mutation {\r\n      deleteNote(iD: \"${id}\") {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }\r\n    `;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json())\r\n  };\r\n\r\n\r\n  //search part\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const results = data.getNotes.filter(item => item.todo.toLowerCase().includes(searchText.toLowerCase()));\r\n      setSearchResults(results);\r\n    }\r\n  }, [loading, searchText]);\r\n\r\n  console.log(searchResults);\r\n  const handleChange = e => {\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  if (loading) return 'Loading...';\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  \r\n  return (\r\n\r\n    <body className=\"todo__body\">\r\n      <h1 className=\"todo__heading\">Todo GraphQL</h1>\r\n      <form className=\"todo__input-form\">\r\n      \r\n        <label className=\"todo__input-title\"></label>\r\n        <input className=\"todo__input-box\" onChange={handleInputChange} onKeyDown={handleKeyPress}\r\n          placeholder=\"What needs to be done\" />\r\n\r\n        <button className=\"todo__input-button\" onClick={handleButtonClick}>Add Todo Item</button>\r\n       \r\n      </form>\r\n      <div>\r\n        <input\r\n          type='text'\r\n          placeholder='Search...'\r\n          value={searchText}\r\n          onChange={handleChange}\r\n        />\r\n        <ul>\r\n        {searchResults.map(item => (\r\n          <li>{item.todo}{item.status}</li>\r\n        ))}\r\n      </ul>\r\n      </div>\r\n      <Todos todoArray={todoArray} markComplete={markComplete} delTodo={delTodo} />\r\n\r\n    </body>\r\n  );\r\n}\r\n\r\nexport default TodoPage;\r\n\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}
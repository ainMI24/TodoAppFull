[{"C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\index.js":"1","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\App.js":"2","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\TodoPage.js":"4","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Login\\Login.js":"5","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\Separate.js":"6","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\todos.js":"7","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Search\\SearchTodo.js":"8","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\todo.js":"9"},{"size":500,"mtime":1629879047000,"results":"10","hashOfConfig":"11"},{"size":797,"mtime":1629960605904,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1629879047000,"results":"13","hashOfConfig":"11"},{"size":4568,"mtime":1629970525258,"results":"14","hashOfConfig":"11"},{"size":1630,"mtime":1629969141047,"results":"15","hashOfConfig":"11"},{"size":952,"mtime":1630037661573,"results":"16","hashOfConfig":"11"},{"size":492,"mtime":1629888166146,"results":"17","hashOfConfig":"11"},{"size":1308,"mtime":1629972016161,"results":"18","hashOfConfig":"11"},{"size":3683,"mtime":1630037596086,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"2t5wvz",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\index.js",[],["43","44"],"C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\App.js",[],"C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\TodoPage.js",["45","46","47"],"import React, { useEffect, useState } from 'react';\r\nimport './TodoPage.css';\r\nimport Todos from './todos';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport SearchTodo from '../Search/SearchTodo';\r\nimport Separate from './Separate';\r\n\r\nconst GRAPHQL_API = 'http://localhost:4000/';\r\n\r\nfunction TodoPage() {\r\n  const [todoValue, setTodoValue] = useState(\"\");\r\n  const [todos, updateTodosList] = useState([]);\r\n  const [todoArray, setTodoArray] = useState([]);\r\n\r\n  useEffect(() => {\r\n\r\n    const query = `query Query {\r\n      getNotes {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }`;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json()).then(result => {\r\n      setTodoArray(result.data.getNotes);\r\n    });\r\n\r\n  }, []);\r\n\r\n  //handle input value\r\n  const handleInputChange = event => {\r\n    setTodoValue(event.target.value);\r\n  };\r\n\r\n  //create new data to graphql server after submit\r\n  const handleButtonClick = (event) => {\r\n    window.location.reload();\r\n\r\n    const query = `\r\n    mutation Mutation {\r\n      createNote(todo: \"${todoValue}\") {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }\r\n    `;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json());\r\n\r\n    if (todoValue != null) {\r\n      const newItem = {\r\n        id: uuidv4(),\r\n        todo: todoValue,\r\n        status: false\r\n      };\r\n\r\n      setTodoArray(previousTodos => {\r\n        return [...previousTodos, newItem];\r\n      });\r\n\r\n      console.log(newItem)\r\n      console.log(newItem.id)\r\n\r\n      setTodoValue(\"\");\r\n    }\r\n    else {\r\n\r\n    }\r\n  }\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleButtonClick();\r\n    }\r\n  }\r\n\r\n  //mark complete function (tally with graphql)\r\n  const markComplete = id => {\r\n    const updatedTodo = todoArray.map(item => {\r\n      if (item.id == id) {\r\n        item.status = !item.status;\r\n\r\n        if (item.status) {\r\n          const query = `\r\n          mutation UpdateStatusMutation {\r\n            updateStatus(iD: \"${id}\", newStatus: true) {\r\n              id\r\n              todo\r\n              status\r\n            }\r\n          }\r\n          `;\r\n\r\n          fetch(GRAPHQL_API, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              query\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json'\r\n            }\r\n          }).then(response => response.json());\r\n        }\r\n        else {\r\n          const query = `\r\n          mutation UpdateStatusMutation {\r\n            updateStatus(iD: \"${id}\", newStatus: false) {\r\n              id\r\n              todo\r\n              status\r\n            }\r\n          }\r\n          `;\r\n\r\n          fetch(GRAPHQL_API, {\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n              query\r\n            }),\r\n            headers: {\r\n              'content-type': 'application/json'\r\n            }\r\n          }).then(response => response.json());\r\n        }\r\n      }\r\n    })\r\n    updateTodosList(updatedTodo);\r\n  };\r\n\r\n  //delete function (tally with graphql)\r\n  const delTodo = id => {\r\n\r\n    setTodoArray([\r\n      ...todoArray.filter(todo => {\r\n        return todo.id !== id;\r\n      })\r\n    ]);\r\n\r\n    const query = `\r\n    mutation Mutation {\r\n      deleteNote(iD: \"${id}\") {\r\n        id\r\n        todo\r\n        status\r\n      }\r\n    }\r\n    `;\r\n\r\n    fetch(GRAPHQL_API, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query\r\n      }),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).then(response => response.json())\r\n  };\r\n\r\n  \r\n\r\n  \r\n  return (\r\n\r\n    <body className=\"todo__body\">\r\n      <h1 className=\"todo__heading\">Todo GraphQL</h1>\r\n      <form className=\"todo__input-form\">\r\n      \r\n        <label className=\"todo__input-title\"></label>\r\n        <input className=\"todo__input-box\" onChange={handleInputChange} onKeyDown={handleKeyPress}\r\n          placeholder=\"What needs to be done\" />\r\n\r\n        <button className=\"todo__input-button\" onClick={handleButtonClick}>Add Todo Item</button>\r\n       \r\n      </form>\r\n      <\r\n// @ts-ignore\r\n      SearchTodo/>\r\n      <Separate/>\r\n      <Todos todoArray={todoArray} markComplete={markComplete} delTodo={delTodo} />\r\n\r\n    </body>\r\n  );\r\n}\r\n\r\nexport default TodoPage;\r\n\r\n\r\n\r\n\r\n","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Login\\Login.js",["48","49"],"import React, { useState } from \"react\";\r\nimport { useMutation, gql} from \"@apollo/client\";\r\nimport 'semantic-ui-css/semantic.min.css'\r\nimport { Button, Form, Grid, Header, Segment } from 'semantic-ui-react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\n\r\nexport const LOGIN_USER = gql`\r\nmutation Mutation($userLoginEMail: String!) {\r\n  userLogin(eMail: $userLoginEMail) {\r\n    id\r\n    email\r\n  }\r\n}\r\n`;\r\n\r\nfunction Login() {\r\n\r\n  const history = useHistory();\r\n   let input;\r\n  \r\n  const [addUser, {loading, error, data }] = useMutation(LOGIN_USER);\r\n  \r\n  if (loading) return 'Submitting...';\r\n  if (error) return `Submission error! ${error.message}`;\r\n\r\n  console.log(error, data);\r\n  \r\n  return (\r\n    <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\r\n    <Grid.Column style={{ maxWidth: 450 }}>\r\n      <Header as='h2' color='red' textAlign='center'>\r\n        Login\r\n      </Header>\r\n      <Form size='large' onSubmit={(e) => {\r\n              e.preventDefault();\r\n              if (!input.value.trim()){\r\n                return;\r\n              }\r\n              addUser({variables: {userLoginEMail: input.value}})\r\n              input.value= \" \";\r\n              history.push(\"/todos\");\r\n            }} >\r\n              <Segment>\r\n              <input\r\n                  placeholder=\"Email\"\r\n                  ref={(node) => (input = node)}/>\r\n              </Segment>  \r\n          <Button color='red' fluid size='large' type=\"submit\">\r\n            Login\r\n          </Button>\r\n      </Form>\r\n    </Grid.Column>\r\n  </Grid>\r\n\r\n  );\r\n\r\n}\r\nexport default Login;\r\n","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\Separate.js",["50"],"C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\todos.js",["51"],"import React from 'react';\r\nimport Todo from './todo';\r\nimport './todos.css';\r\n\r\nexport default function Todos(props) {\r\n  let allNotes = \"\";\r\n  try {\r\n    for (var key in props) {\r\n      allNotes = props.todoArray.map(item => {\r\n        return (\r\n          <div className=\"todo__list\">\r\n            <Todo item={item} markComplete={props.markComplete} delTodo={props.delTodo} />\r\n          </div>\r\n        );\r\n      })\r\n    }\r\n  } catch (e) { }\r\n  return (\r\n    <div>{allNotes}</div>\r\n  );\r\n}","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Search\\SearchTodo.js",["52"],"import React from 'react';\r\nimport { useState, useEffect} from 'react';\r\nimport './search.css';\r\nimport {useQuery, gql} from '@apollo/client';\r\n\r\nconst LOAD_NOTES = gql`\r\n  query Query {\r\n  getNotes {\r\n    id\r\n    todo\r\n    status\r\n  }\r\n}`;\r\n\r\nfunction SearchTodo (){\r\n\r\n  const [searchText, setSearchText] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const {loading, error, data} = useQuery(LOAD_NOTES);\r\n\r\n  useEffect(() => {\r\n    if (!loading) {\r\n      const results = data.getNotes.filter(item => item.todo.toLowerCase().includes(searchText.toLowerCase()));\r\n      setSearchResults(results);\r\n    }\r\n  }, [loading, searchText]);\r\n\r\n  console.log(searchResults);\r\n  const handleChange = e => {\r\n    setSearchText(e.target.value);\r\n  };\r\n\r\n  if (loading) return 'Loading...';\r\n  if (error) return `Error! ${error.message}`;\r\n\r\n  return (\r\n    <div className={\"searchelement\"}>\r\n      <div>\r\n        <div style={{ color: \"red\" }}>\r\n        <input\r\n          type='text'\r\n          placeholder='Search...'\r\n          value={searchText}\r\n          onChange={handleChange}\r\n        />\r\n        </div>\r\n        <ul>\r\n        {searchResults.map(item => (\r\n          <li>{item.todo}</li>\r\n        ))}\r\n      </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchTodo;\r\n","C:\\Users\\User\\Downloads\\TO-DO APP FULL\\FULL\\todo-client\\src\\component\\Todo\\todo.js",["53","54"],{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":12,"column":10,"nodeType":"61","messageId":"62","endLine":12,"endColumn":15},{"ruleId":"63","severity":1,"message":"64","line":97,"column":44,"nodeType":"65","messageId":"66","endLine":97,"endColumn":46},{"ruleId":"67","severity":1,"message":"68","line":98,"column":19,"nodeType":"69","messageId":"70","endLine":98,"endColumn":21},{"ruleId":"59","severity":1,"message":"71","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":25},{"ruleId":"59","severity":1,"message":"72","line":6,"column":15,"nodeType":"61","messageId":"62","endLine":6,"endColumn":21},{"ruleId":"63","severity":1,"message":"73","line":39,"column":26,"nodeType":"65","messageId":"74","endLine":39,"endColumn":28},{"ruleId":"59","severity":1,"message":"75","line":8,"column":14,"nodeType":"61","messageId":"62","endLine":8,"endColumn":17},{"ruleId":"76","severity":1,"message":"77","line":26,"column":6,"nodeType":"78","endLine":26,"endColumn":27,"suggestions":"79"},{"ruleId":"63","severity":1,"message":"64","line":50,"column":47,"nodeType":"65","messageId":"66","endLine":50,"endColumn":49},{"ruleId":"67","severity":1,"message":"68","line":51,"column":25,"nodeType":"69","messageId":"70","endLine":51,"endColumn":27},"no-native-reassign",["80"],"no-negated-in-lhs",["81"],"no-unused-vars","'todos' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useState' is defined but never used.","'uuidv4' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'key' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'data.getNotes'. Either include it or remove the dependency array.","ArrayExpression",["82"],"no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},"Update the dependencies array to be: [data.getNotes, loading, searchText]",{"range":"85","text":"86"},[642,663],"[data.getNotes, loading, searchText]"]